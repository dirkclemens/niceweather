//
//  OpenWeatherAPIClient.swift
//  Energiebilanz
//
//  Created by Dirk Clemens on 20.04.23
//
//  generated by https://chat.openai.com
//  with information from https://openweathermap.org/api/one-call-api

import Foundation

struct WeatherData: Decodable {
    let lat: Double
    let lon: Double
    let timezone: String
    let timezone_offset: Int
    let current: CurrentWeatherData
    let hourly: [HourlyWeatherData]
    let daily: [DailyWeatherData]
    let alerts: [Alert]?
}

struct CurrentWeatherData: Decodable {
    let dt: Int
    let sunrise: Int
    let sunset: Int
    let temp: Double
    let feels_like: Double
    let pressure: Int
    let humidity: Int
    let dew_point: Double
    let uvi: Double
    let clouds: Int
    let visibility: Int
    let wind_speed: Double
    let wind_deg: Int
    let weather: [Weather]
    let rain: Rain?
}

struct HourlyWeatherData: Decodable {
    let dt: Int
    let temp: Double
    let feels_like: Double
    let pressure: Int
    let humidity: Int
    let dew_point: Double
    let uvi: Double
    let clouds: Int
    let visibility: Int
    let wind_speed: Double
    let wind_deg: Int
    let wind_gust: Double?
    let weather: [Weather]
    let pop: Double
    let rain: Rain?
}

struct DailyWeatherData: Decodable {
    let dt: Int
    let sunrise: Int
    let sunset: Int
    let moonrise: Int
    let moonset: Int
    let moon_phase: Double
    let temp: Temperature
    let feels_like: FeelsLike
    let pressure: Int
    let humidity: Int
    let dew_point: Double
    let wind_speed: Double
    let wind_deg: Int
    let weather: [Weather]
    let clouds: Int
    let rain: Double?
    let uvi: Double
}

struct Temperature: Decodable {
    let day: Double
    let min: Double
    let max: Double
    let night: Double
    let eve: Double
    let morn: Double
}

struct FeelsLike: Codable {
    let day: Double
    let night: Double
    let eve: Double
    let morn: Double
}

// https://openweathermap.org/weather-conditions#Icon-list
struct Weather: Decodable {
    let id: Int
    let main: String
    let description: String
    let icon: String // https://openweathermap.org/img/wn/10d@2x.png
}

struct Rain: Codable {
    let oneHour: Double?

    enum CodingKeys: String, CodingKey {
        case oneHour = "1h"
    }
}

struct Alert: Codable {
    let sender_name: String
    let event: String
    let start: Int
    let end: Int
    let description: String
    let tags: [String]?
}

class OpenWeatherAPIClient {
    private var apiKey: String
    private let decoder = JSONDecoder()

    init(apiKey: String) {
        self.apiKey = apiKey
    }

    func fetchWeatherData(latitude: Double, longitude: Double, completion: @escaping (Result<WeatherData, Error>) -> Void) {
        let urlString = "https://api.openweathermap.org/data/2.5/onecall?lat=\(latitude)&lon=\(longitude)&lang=de&units=metric&appid=\(apiKey)"//&exclude=minutely,daily"
        
        guard let url = URL(string: urlString) else {
            completion(.failure("invalid URL" as! Error))
            return
        }
        
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse, (200...299).contains(httpResponse.statusCode) else {
                completion(.failure("invalid Response" as! Error))
                return
            }
            
            guard let data = data else {
                completion(.failure("no Data" as! Error))
                return
            }
            
            do {
                let decoder = JSONDecoder()
                decoder.dateDecodingStrategy = .secondsSince1970
                let weatherData = try decoder.decode(WeatherData.self, from: data)
                completion(.success(weatherData))
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
}
